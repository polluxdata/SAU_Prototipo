<?php

?>
<html>


<head>

<script src="js/jquery-3.1.0.min.js"></script>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

<!-- Optional theme -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">

<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

 <link rel="stylesheet" href="http://openlayers.org/en/v3.18.2/css/ol.css" type="text/css">
    <style>
      .map {
        height: 400px;
        width: 100%;
      }
    </style>
    <script src="http://openlayers.org/en/v3.18.2/build/ol.js" type="text/javascript"></script>
    
    
<script src="//d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script src="//d3js.org/topojson.v1.min.js"></script>

 
</head>
<body>
<nav class="navbar navbar-default">
  <div class="container-fluid">
    <div class="navbar-header">
    <a class="navbar-brand" href="#"><img alt="Brand" src="img/logo.png" style="width:20px;"></a>
      <ul class="nav navbar-nav">
      	
      	<li><p class="navbar-btn"> <a href="#" class="btn btn-default">Indicadores</a></p></li>
        	<li><p class="navbar-btn"> <a href="#" class="btn btn-default">Comparativa</a></p></li>         
        	<li><p class="navbar-btn">  <a href="#" class="btn btn-default">Open Data</a></p></li>
       </ul>       
     
    </div>
  </div>
</nav>
<div class="container">
	<div class="row">
		<div class="col-md-4" id="">
			Navbar		
		</div>
		
       
        
		<div class="col-md-8" id="">
					 <div id="map" class="map"></div>
		</div>        
        
	</div>
</div>


    <script type="text/javascript">
      var map = new ol.Map({
        target: 'map',
        layers: [
          new ol.layer.Tile({
            source: new ol.source.OSM()
          })
        ],
        view: new ol.View({
          center: ol.proj.fromLonLat([37.41, 8.82]),
          zoom: 4
        })
      });
      
      
	//EPSG:32717&WIDTH=769&HEIGHT=331&BBOX=751214.3888394125,9854599.074253751,780548.6201246276,9867212.335597629      
	//var textent = ol.proj.transformExtent([6, 43, 16, 50], 'EPSG:4326', 'EPSG:3857');
      
      
      var districtLayer = new ol.layer.Tile({
			    source: new ol.source.TileWMS({
			        url: 'http://flacso.seyanim.com:8080/geoserver/indurb/wms?',
			        params: {
			            'LAYERS': 'indurb:circuitos',
			            'VERSION': '1.1.1',
			            'FORMAT': 'image/png'
			            //'TILED': true
			        }
			    })
			});
			
		
			
		//map.addLayer(districtLayer);
    </script>
    
    
    <script>

		
      /*var map = new ol.Map({
        layers: [
          new ol.layer.Tile({
            source: new ol.source.Stamen({
              layer: 'watercolor'
            })
          })
        ],
        target: 'map',
        view: new ol.View({
          center: ol.proj.fromLonLat([-97, 38]),
          zoom: 4
        })
      });*/


      /**
       * Load the topojson data and create an ol.layer.Image for that data.
       */
      //d3.json('http://flacso.seyanim.com:8080/geoserver/indurb/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=indurb:circuitos&maxFeatures=50&outputFormat=application%2Fjson', function(error, json) {
      d3.json('http://flacso.seyanim.com/flacso/geoio.php', function(error, json) { 

		  console.log(json);
        
        var features = topojson.feature(json, json.objects.circuitos);

		 
			//
        /**
         * This function uses d3 to render the topojson features to a canvas.
         * @param {ol.Extent} extent Extent.
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         * @param {ol.Size} size Size.
         * @param {ol.proj.Projection} projection Projection.
         * @return {HTMLCanvasElement} A canvas element.
         */
        var canvasFunction = function(extent, resolution, pixelRatio,
            size, projection) {
          var canvasWidth = size[0];
          var canvasHeight = size[1];

          var canvas = d3.select(document.createElement('canvas'));
          canvas.attr('width', canvasWidth).attr('height', canvasHeight);

          var context = canvas.node().getContext('2d');

          var d3Projection = d3.geo.mercator().scale(1).translate([0, 0]);
          var d3Path = d3.geo.path().projection(d3Projection);

          var pixelBounds = d3Path.bounds(features);
          var pixelBoundsWidth = pixelBounds[1][0] - pixelBounds[0][0];
          var pixelBoundsHeight = pixelBounds[1][1] - pixelBounds[0][1];

          var geoBounds = d3.geo.bounds(features);
          var geoBoundsLeftBottom = ol.proj.transform(
              geoBounds[0], 'EPSG:4326', projection);
          var geoBoundsRightTop = ol.proj.transform(
              geoBounds[1], 'EPSG:4326', projection);
          var geoBoundsWidth = geoBoundsRightTop[0] - geoBoundsLeftBottom[0];
          if (geoBoundsWidth < 0) {
            geoBoundsWidth += ol.extent.getWidth(projection.getExtent());
          }
          var geoBoundsHeight = geoBoundsRightTop[1] - geoBoundsLeftBottom[1];

          var widthResolution = geoBoundsWidth / pixelBoundsWidth;
          var heightResolution = geoBoundsHeight / pixelBoundsHeight;
          var r = Math.max(widthResolution, heightResolution);
          var scale = r / (resolution / pixelRatio);

          var center = ol.proj.transform(ol.extent.getCenter(extent),
              projection, 'EPSG:4326');
          d3Projection.scale(scale).center(center)
              .translate([canvasWidth / 2, canvasHeight / 2]);
          d3Path = d3Path.projection(d3Projection).context(context);
          d3Path(features);
          context.stroke();

          return canvas[0][0];
        };

        var layer = new ol.layer.Image({
          source: new ol.source.ImageCanvas({
            canvasFunction: canvasFunction,
            projection: 'EPSG:3857'
          })
        });
        map.addLayer(layer);
      });
    </script>

</body>
</html>